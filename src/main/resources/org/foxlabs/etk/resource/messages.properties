#Error messages

environment.typeNotFound = Type "{0}" is not found
environment.notAnEnumType = Type "{0}" is not an enum type
environment.invalidEnumLiteral = Undefined enum "{0}" literal "{1}" 
environment.variableNotFound = Variable "{0}" is not found
environment.functionNotFound = Function "{0}" is not found
environment.beanNotFound = Bean type "{0}" is not found
environment.propertyNotFound = Property "{0}" is not found
environment.methodNotFound = Method "{0}" is not found

runtime.nullPointer = Null pointer
runtime.nullPointerArgument = Argument {0} null pointer
runtime.divisionByZero = Division by zero
runtime.indexOutOfBounds = Index {0} out of bounds [0,{1}]
runtime.classCast = Cannot cast to {0}

semantic.unsupportedLiteralType = Unsupported literal type "{0}"
semantic.unsupportedIndexedType = Unsupported indexed type "{0}"
semantic.cannotConvert = Cannot convert from "{0}" to "{1}"
semantic.undefinedUnaryOperator = The unary operator "{0}" is undefined for operand type "{1}"
semantic.undefinedBinaryOperator = The binary operator "{0}" is undefined for operand types "{1}", "{2}"
semantic.functionAmbiguity = Function call "{0}" ambiguity
semantic.methodAmbiguity = Method call "{0}" ambiguity

io.corruptedInputStream = Expression node input stream is corrupted

function.classNotFound = Function class {0} is not found
function.notAFunctionClass = Not a function class {0}
function.invalidFunctionClass = Function must implement public constructor {0}(String, String)
function.cannotInstantiate = Cannot instantiate function {0}: {1}

function.sax.errorMessage = ERROR: {0} at Line: {1}, Column: {2}
function.sax.fatalMessage = FATAL: {0} at Line: {1}, Column: {2}

codec.unsupportedGrammar = Grammar "{0}" is not supported
codec.grammar.invalidExpression = Invalid expression
codec.grammar.expressionExpected = Expression expected
codec.grammar.invalidToken = Invalid token {0}
codec.grammar.tokenExpected = Token {0} expected

xml.readError = Error reading XML
xml.nodeElementExpected = Node element is expected, but <{0}:{1}> element is occurred
xml.unaryElementExpected = Element <{0}> must contain unary node element
xml.binaryElementExpected = Element <{0}> must contain binary node elements
xml.invalidCharValue = Illegal char value: {0}
xml.invalidNumberType = Illegal number type: {0}
xml.invalidNumberValue = Illegal {0} value: {1}
